<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx" width="500" height="470"  applicationComplete="init()" >
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->	
	</fx:Declarations>	

	<fx:Script>
		<![CDATA[
			import com.as3xls.xls.ExcelFile;
			import com.as3xls.xls.Sheet;
			
			import mx.controls.Alert;		
			
		private var aLangList:Array=[]; //语言列表
			
		private function init():void
		{
			var m:String=getValue("excelM");
			excel_txt.text =(m ? m :  "选择Excel文件") ;
			
			var p:String=getValue("excelP");
			xml_txt.text =(p ? p : "默认和Excel同一路径") ;
			
			excel_txt.addEventListener(Event.CHANGE,textHandler);
			xml_txt.addEventListener(Event.CHANGE,textHandler);
		}
		
		private function textHandler(e:Event):void
		{
			storeDataLSO(excel_txt.text,xml_txt.text);
		}
			
		private function onCreate(path:String):void 
		{
		// Load the embedded spreadsheet and get the first sheet
			var urlloader:URLLoader = new URLLoader();
			urlloader.dataFormat = URLLoaderDataFormat.BINARY;
			urlloader.addEventListener(Event.COMPLETE,urlloaderCompHandler);
			urlloader.addEventListener(IOErrorEvent.IO_ERROR,urlloaderErrHandler);
			urlloader.load(new URLRequest(path));
			
			addTipsValue("start loader "+path);
			function urlloaderCompHandler(e:Event):void 
			{
				addTipsValue("finish loader");
				addTipsValue("parse data");
				var excelFile:ExcelFile = new ExcelFile();
				excelFile.loadFromByteArray(e.target.data);
				
				createOneXML(excelFile);				
			} 
			
			function urlloaderErrHandler(e:IOErrorEvent):void
			{
				Alert.show(e.text,"文件错误");
			}
		}
			
		/**
		 * 
		 */	
		private function createOneXML(excelFile:ExcelFile):void
		{
			aLangList=[];
			var count:int=excelFile.sheets.length;
			var tData:Array=[];
			for(var i:int=0;i<count;i+=1)
			{
				var sheet:Sheet = excelFile.sheets[i];
				if(!sheet) continue;		
				tData.push({"name":sheet.name,"value":createXML(sheet)});
			}
			
			addTipsValue("parse data finish");
		
			count=aLangList.length;		
			if(count<=0)
			{
				Alert.show("没有任何语言版本，缺少lang.","错误");
				return;
			}
				
			for(i=0;i<count;i+=1)
			{			
				var sXML:String=getXMLData(aLangList[i]);				
				createFile(sXML,(aLangList[i]=="ALL" ? null : aLangList[i]));				
			}
			
			addTipsValue("create xml data complete");			
			
			function getXMLData(lang:String):String
			{
				var sxml:String="";
				var count:int=tData.length;			
				for(var i:int=0;i<count;i+=1)
				{
					if(!tData[i].value[lang]) continue;
					sxml+="   <"+tData[i].name+">";
					sxml+= "\n"+tData[i].value[lang]+"\n";
					sxml+="   </"+tData[i].name+">\n";			
				}
				return sxml;
			}			
		}			
		
	    private function createXML(sheet:Sheet):Object
		{
			var filterList:Array=["isRow","lang"];	//过滤列表
			var isRow:Boolean=findNodeIsRow("isRow",sheet);
			
			var row:int=(!isRow ? sheet.rows : sheet.cols);			
			var col:int=(isRow ? sheet.rows : sheet.cols);
			var dObject:Object=new Object();
			var tArr:Array;
			if(!selectx_mc.selected) col=1;
			for(var i:int=0;i<col;i+=1)
			{	
				if(selectx_mc.selected && !isHaveLangValue(i+1)) continue; //没有语言
				tArr = createNodeXML(i+1);
				dObject[tArr[0]] = tArr[1];				
				if(tArr[0] && aLangList.indexOf(tArr[0])==-1) aLangList.push(tArr[0]); //汇总语言
			}
			
			function isHaveLangValue(index:int):Boolean
			{
				var lang:String,id:String;
				for(var i:int=0;i<row;i+=1)
				{	
					id=(isRow ? sheet.getCell(0, i).value : sheet.getCell(i, 0).value);	
					if(id=="lang")
					{
						if(isRow)
							lang=sheet.getCell(index, i).value;			
						else 
							lang= sheet.getCell(i, index).value;		
						break;
					} 
				}
				
				return (lang !=null && lang!="");
			}
			
			function createNodeXML(index:int):Array
			{
				var id:String,oNode:Object,lang:String;
				var sxml:String="";
				var nodeStr:String;
				var reg:RegExp = /(^\s+)|(\s+$)|\s/g;	
				oNode=new Object();
				nodeStr="     <info ";
				for(var j:int=0;j<row;j+=1)
				{			
					id=(isRow ? sheet.getCell(0, j).value : sheet.getCell(j, 0).value);	
					if(id) id=id.replace(reg,"");
					if(id=="lang") lang=(isRow ? sheet.getCell(index, j).value : sheet.getCell(j, index).value); //获取语言
					if(!id || oNode[id] || regNum(id) || filterList.indexOf(id)!=-1) continue;
					oNode[id]=1;
					if(j>0) nodeStr+="           ";
				    if(isRow)
						nodeStr +=id+"=\"" + sheet.getCell(index, j).value + "\"";			
					else 
						nodeStr +=id+"=\"" + sheet.getCell(j, index).value + "\"";	
					
				    nodeStr+="\n";
				}
				if(nodeStr.indexOf("\n")) nodeStr=nodeStr.substring(0,nodeStr.lastIndexOf("\n"));
				nodeStr+="/>";	
				sxml+=nodeStr;
				if(!selectx_mc.selected) lang="ALL";
				return [lang,sxml];
			}	
			//trace(sxml);
			return dObject;
		}
		
		/**
		 * 查找是否按行生成数据
		 */	
		private function findNodeIsRow(sname:String,sheet:Sheet):Boolean
		{
			var isRow:Boolean;			
			var id:String;         
			for(var j:int=0;j<sheet.cols;j+=1)
			{					
				id= sheet.getCell(0, j).value;		
				if(id==sname)
				{
					isRow=true;
					break;
				}
			}	
			return isRow;
		}
		
		private function regNum(sValue:String):Boolean
		{
			var isFind:Boolean;
			var iValue:String=sValue.substring(0,1);
			for(var i:int=0;i<9;i+=1)
			{
				if(i.toString()==iValue)
				{
					isFind=true;
					break;
				}
			}
			
			return isFind;
		}
			
		private function createFile(sData:*,sFile:String=null):void
		{
		   var  sName:String=String(excel_txt.text);
		   var sPath:String=xml_txt.text;
		   if(sPath=="" || sPath=="默认和Excel同一路径")  sPath = sName.substring(0,sName.lastIndexOf(File.separator));
		   
		   sName=sName.substring(sName.lastIndexOf(File.separator)+1,sName.lastIndexOf("."));			   
		 
			sPath+=File.separator+(sFile ? sFile+File.separator :"")+sName+".xml";
			
			addTipsValue("start create xml file"+sPath);
			saveData(sPath,sData);
		}
			
			/**
			 * 保存文件
			 */
			private function saveData(path:String = null, _dataXML:String = null):void {		
				try
				{
					var dataFile:File = new File(path);		
					var stream:FileStream = new FileStream();		
					stream.open(dataFile, FileMode.WRITE);
					stream.writeUTFBytes("<?xml version='1.0' encoding='UTF-8'?>\n<root>\n"+_dataXML+"</root>");
					stream.close();
					
					Alert.show(path,"生成XML文件成功");
					addTipsValue("create xml file complete");
				}catch(e:Error)
				{
					Alert.show(path,"路径错误");
				}
			}	
			
		private function addTipsValue(sValue:String):void
		{
			if(tips_txt.text) tips_txt.text+="\n";
			tips_txt.text+=sValue;			
		}	
			
		  protected function onBrowseProject(event:MouseEvent):void
		  {				
			  var excelFilter:FileFilter = new FileFilter("Excel(*.xlsx,*.xls)", "*.xlsx;*.xls");
			  var file:File = new File();
			  file.browseForOpen("选择Excel文件",[excelFilter]);
			  file.addEventListener(Event.SELECT,onProjectSelected);
			}
			
			protected function onProjectSelected(event:Event):void
			{
				var file:File = event.target as File;
				excel_txt.text =file.nativePath;		
				storeDataLSO(excel_txt.text,xml_txt.text);
			}
			
			protected function onBrowseRelease(event:MouseEvent):void
			{
				var file:File = new File();
				file.browseForDirectory("选择生成xml路径");
				file.addEventListener(Event.SELECT,onReleaseSelected);
			}
			
			protected function onReleaseSelected(event:Event):void
			{
				xml_txt.text = (event.target as File).nativePath;
				storeDataLSO(excel_txt.text,xml_txt.text);
			}	
			
			protected function start_btn_clickHandler(event:MouseEvent):void
			{
				if(excel_txt.text=="选择Excel文件")
				{
					Alert.show("选择Excel文件");
					return;
				}
				onCreate(excel_txt.text);
			}
			protected function clear_mc_clickHandler(event:MouseEvent):void
			{
				if(tips_txt.text=="")
				{
					Alert.show("已经清理过了");
					return;
				}
				tips_txt.text="";
			}
			
			private function storeDataLSO(m:String=null, p:String=null):void
			{
				var sharedObject:SharedObject = SharedObject.getLocal("excel", "/");
				sharedObject.data["excelM"] = m;
				sharedObject.data["excelP"] = p;
				
				try
				{
					var flushResult:String = sharedObject.flush();
					if (flushResult == SharedObjectFlushStatus.FLUSHED)
					{
						return;
					}
				}
				catch (e:Error)
				{
					Security.showSettings(SecurityPanel.LOCAL_STORAGE);
				}
			}
			
			private function getValue(m:String):String
			{
				var sharedObject:SharedObject = SharedObject.getLocal("excel", "/");				
				return (sharedObject.data.hasOwnProperty(m) ? sharedObject.data[m] : null);
			}
			
		]]>
	</fx:Script>
	<mx:Form x="0" y="0" width="500" height="470">
	<s:Label text="Excel导出xml工具" width="456" height="21" verticalAlign="middle" textAlign="center"/>
	<s:BorderContainer width="456" height="399">
		<s:Button x="319" y="10" label="选择Excel路径" width="117" id="choose_btn" click="onBrowseProject(event)"/>
		<s:TextInput x="8" y="9" width="299" id="excel_txt"/>
		<s:TextInput x="8" y="41" width="299" id="xml_txt" borderVisible="true"/>
		<s:Button x="319" y="42" label="生成xml路径" width="119" id="create_btn"  click="onBrowseRelease(event)"/>
		<s:Button x="276" y="80" label="开始生成" id="start_btn" click="start_btn_clickHandler(event)"/>
		<s:TextArea x="10" y="109" width="431" height="275" id="tips_txt"/>
		<s:CheckBox x="10" y="78" label="是否多语言" id="selectx_mc" selected="true"/>
		<s:Button x="357" y="80" label="清理文本" id="clear_mc" click="clear_mc_clickHandler(event)"/>
	</s:BorderContainer>
	
	</mx:Form>
</s:WindowedApplication>
